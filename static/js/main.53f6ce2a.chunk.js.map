{"version":3,"sources":["dnd/constants.js","App.js","reportWebVitals.js","index.js"],"names":["ItemTypes","List","props","doneList","listItems","map","item","id","setListItems","listTitle","title","listCards","cards","nanoid","className","AddList","React","useState","inputText","setInputText","toggleAddAList","event","document","querySelector","classList","toggle","onChange","target","value","onClick","SingleCard","index","draggable","cardId","onDrop","setDargEnd","parseInt","getAttribute","setDargEndId","DraggableCard","useDrag","type","drag","ref","CardList","dragEnd","dragEndId","newCards","draggingId","useDrop","accept","drop","fromIndex","toIndex","k","splice","newList","handleMoveCards","returnList","AddCard","inputTitle","setInputTitle","customTarget","newTarget","parentNode","childNodes","forEach","console","log","filter","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","DndProvider","backend","HTML5Backend","getElementById"],"mappings":"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","file":"static/js/main.53f6ce2a.chunk.js","sourcesContent":["export const ItemTypes = {\n    CARD: 'card',\n};\n","import React from 'react';\nimport './App.css';\nimport { nanoid } from 'nanoid';\nimport { useDrag, useDrop } from 'react-dnd';\nimport { ItemTypes } from './dnd/constants';\n// import PropTypes from 'prop-types';\n\nconst List = (props) => {\n    const doneList = props.listItems.map((item) => {\n        return (\n            <AddCard\n                key={nanoid()}\n                id={item.id}\n                listItems={props.listItems}\n                setListItems={props.setListItems}\n                listTitle={item.title}\n                listCards={item.cards}\n                // titleText={item.title}\n            />\n        );\n    });\n    return (\n        <div className='card-list'>\n            {doneList}\n            <AddList setListItems={props.setListItems} listItems={props.listItems} />\n        </div>\n    );\n};\n\nconst AddList = (props) => {\n    // set task text input\n    const [inputText, setInputText] = React.useState('');\n    const toggleTextInput = (event) => {\n        setInputText(event.target.value);\n    };\n    // toggle add list\n    const toggleAddAList = (event) => {\n        document.querySelector('.add-list-button').classList.toggle('hide');\n        document.querySelector('.add-save-list-button').classList.toggle('hide');\n        document.querySelector('.list-input').classList.toggle('hide');\n        document.querySelector('.list-edit').classList.toggle('card-init-toggle');\n    };\n    const setNewCard = () => {\n        if (inputText === '') {\n            toggleAddAList();\n        } else {\n            props.setListItems([...props.listItems, { id: nanoid(), title: inputText, cards: [] }]);\n            setInputText('');\n        }\n    };\n    return (\n        <div className='list edit list-edit'>\n            <input\n                className='input-box list-input hide'\n                onChange={toggleTextInput}\n                value={inputText}\n            ></input>\n            <button className='add-init-button add-list-button' onClick={toggleAddAList}>\n                + Add a list\n            </button>\n            <div className='add-save-close-buttons add-save-list-button hide'>\n                <button className='add-save-button' onClick={setNewCard}>\n                    Add List\n                </button>\n                <button className='add-close-button' onClick={toggleAddAList}>\n                    X\n                </button>\n            </div>\n        </div>\n    );\n};\n\nconst SingleCard = (props) => {\n    return (\n        <div\n            index={props.index}\n            className='single-card'\n            draggable='true'\n            id={props.cardId}\n            onDrop={(event) => {\n                props.setDargEnd(parseInt(event.target.getAttribute('index')));\n                props.setDargEndId(event.target.getAttribute('id'));\n            }}\n        >\n            {props.item}\n        </div>\n    );\n};\n\nconst DraggableCard = (props) => {\n    let index = props.index;\n    let cardId = props.cardId;\n    const [, drag] = useDrag({\n        item: { cardId, index, type: ItemTypes.CARD },\n    });\n    return (\n        <div ref={drag}>\n            <SingleCard\n                cardId={cardId}\n                item={props.item}\n                index={index}\n                setDargEnd={props.setDargEnd}\n                setDargEndId={props.setDargEndId}\n            />\n        </div>\n    );\n};\n\nconst CardList = (props) => {\n    const [dragEnd, setDargEnd] = React.useState(0);\n    const [dragEndId, setDargEndId] = React.useState('');\n    // handle card move\n    let newCards = props.listCards;\n    let draggingId = '';\n    const handleMoveCards = (fromIndex, toIndex) => {\n        let cards = props.listCards;\n        for (let k in cards) {\n            let item = cards[k];\n            if (k == fromIndex) {\n                cards.splice(k, 1);\n                cards.splice(toIndex, 0, item);\n                break;\n            }\n        }\n        newCards = cards;\n        const newList = props.listItems.map((item) => {\n            if (item.id === draggingId) {\n                return {\n                    id: item.id,\n                    title: item.title,\n                    cards: newCards,\n                };\n            } else {\n                return item;\n            }\n        });\n        props.setListItems(newList);\n    };\n    const [, drop] = useDrop({\n        accept: ItemTypes.CARD,\n        drop: (item) => {\n            draggingId = item.cardId;\n            if (draggingId === dragEndId) {\n                handleMoveCards(item.index, dragEnd);\n            }\n        },\n    });\n\n    // render\n    const returnList = props.listCards.map((item, index) => {\n        let id = nanoid();\n        return (\n            <DraggableCard\n                key={id}\n                cardId={props.cardId}\n                id={id}\n                item={item}\n                index={index}\n                setDargEnd={setDargEnd}\n                setDargEndId={setDargEndId}\n            />\n        );\n    });\n    return <div ref={drop}>{returnList}</div>;\n};\n\nconst AddCard = (props) => {\n    // console.log(props.setListItems);\n    // set task text input\n    const [inputText, setInputText] = React.useState('');\n    const [inputTitle, setInputTitle] = React.useState(props.listTitle);\n    // toggle input\n    const toggleTextInput = (event) => {\n        setInputText(event.target.value);\n    };\n    // toggle title input\n    const toggleTitleInput = (event) => {\n        setInputTitle(event.target.value);\n    };\n    // edit title\n    const editTitle = (event) => {\n        event.target.parentNode.childNodes.forEach((item) => {\n            item.classList.toggle('hide');\n        });\n    };\n    // save title\n    const saveTitle = (event) => {\n        event.target.parentNode.childNodes.forEach((item) => {\n            item.classList.toggle('hide');\n        });\n        const newList = props.listItems.map((item) => {\n            if (item.id === props.id) {\n                return { id: item.id, title: inputTitle, cards: item.cards };\n            } else {\n                return item;\n            }\n        });\n        props.setListItems(newList);\n        console.log(newList);\n    };\n    // toggle add list\n    const toggleAddAList = (event, customTarget) => {\n        let newTarget = '';\n        if (customTarget) {\n            newTarget = customTarget;\n        } else {\n            newTarget = event.target.parentNode;\n        }\n        newTarget.querySelector('.add-card-button').classList.toggle('hide');\n        newTarget.querySelector('.add-save-card-button').classList.toggle('hide');\n        newTarget.querySelector('.card-input').classList.toggle('hide');\n    };\n    // close card\n    const closeCard = (event) => {\n        let newTarget = event.target.parentNode.parentNode;\n        toggleAddAList(null, newTarget);\n    };\n    // set new card\n    const setNewCard = (event) => {\n        if (inputText === '') {\n            let newTarget = event.target.parentNode.parentNode;\n            toggleAddAList(null, newTarget);\n        } else {\n            const newList = props.listItems.map((item) => {\n                const newCards = [...item.cards, inputText];\n                if (item.id === props.id) {\n                    return { id: props.id, title: props.listTitle, cards: newCards };\n                } else {\n                    return item;\n                }\n            });\n            props.setListItems(newList);\n            setInputText('');\n        }\n    };\n    // delete a list\n    const deleteList = (event) => {\n        const newList = props.listItems.filter((item) => {\n            if (item.id !== props.id) {\n                return item;\n            }\n        });\n        props.setListItems(newList);\n    };\n\n    // render\n    return (\n        <div className='card'>\n            <div className='card-title-box'>\n                <div className='card-title'>{props.listTitle}</div>\n                <input\n                    className='card-title-input hide'\n                    value={inputTitle}\n                    onChange={toggleTitleInput}\n                ></input>\n                <button className='card-title-edit hide' onClick={saveTitle}>\n                    save\n                </button>\n                <button className='card-title-edit' onClick={editTitle}>\n                    edit\n                </button>\n            </div>\n            <CardList\n                listCards={props.listCards}\n                setListItems={props.setListItems}\n                listItems={props.listItems}\n                cardId={props.id}\n            />\n            <input\n                className='input-box card-input hide'\n                value={inputText}\n                onChange={toggleTextInput}\n            ></input>\n            <button className='add-init-button add-card-button' onClick={toggleAddAList}>\n                + Add a Card\n            </button>\n            <div className='add-save-close-buttons add-save-card-button hide'>\n                <button className='add-save-button' onClick={setNewCard}>\n                    Add Card\n                </button>\n                <button className='add-close-button' onClick={closeCard}>\n                    X\n                </button>\n            </div>\n            <button className='add-init-button add-card-button' onClick={deleteList}>\n                Delete List\n            </button>\n        </div>\n    );\n};\n\nconst App = () => {\n    const [listItems, setListItems] = React.useState([\n        { id: nanoid(), title: '1', cards: ['1', '2', '3', '4'] },\n        { id: nanoid(), title: '2', cards: ['11', '22', '33', '44'] },\n    ]);\n    return (\n        <div className='App'>\n            <h1>Trello-Like Single Page App</h1>\n            <List listItems={listItems} setListItems={setListItems} />\n        </div>\n    );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\n\nReactDOM.render(\n    <React.StrictMode>\n        <DndProvider backend={HTML5Backend}>\n            <App />\n        </DndProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}